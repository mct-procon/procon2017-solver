QRコードを読み取り{多角形番号, 頂点列}のデータに変換し、ソルバで解かせたら、
完成したパズルにおいて、右にいくほどピースの番号が大きくなる傾向があった。
自分のプログラムでも、自然にそうなったので、自分のプログラムおよび
上記のパズルについて、番号と多角形の配置の関係を調べた。
すると、以下の規則でナンバリングされていることが分かった。
・任意の「複素平面上の点の集合」について、x座標最小の点（複数あればそれらのうちy座標最小の点）のことを、最小点と呼ぶ。
・各ピースの最小点を求めると、その中での最小点を持つピースには0番、
ピース0の最小点を除いた中での最小点を持つピースには1番、
ピース0,1の最小点を除いたなかでの最小点を持つピースには2番…
が割り当てられている。
ラフにいうと、各多角形のx座標最小の点（複数あればそれらのうちy座標が最小の点）の場所とナンバリングに規則性があった。
ーーーー
よって、以下のことが成り立つ。
枠穴の最も左上の点には0番のピースがくっつく。
新たに枠穴を更新すると、同様に1番のピースがくっつく。
…
ーーーー
また、今年の問題では、完成前も完成後も、多角形の点の座標はすべて整数になるので、
ピースの最終的な向きは、8通りとか24通りとか、それほど多くない。
ーーーー
よって、以下のアルゴリズムが有効だと考えられる。
・枠穴の最小点にピースiの最小点をくっつける。くっつけ方は列挙する。
(i = 0, 1, …の順で実行）
しかし、貪欲に「結合度の高い組み合わせを採用」とすると、あまりうまく
いかなかったので、ビームサーチをしている。
ちなみに、ビーム幅を1から10にするだけで、解が劇的に改善する。（実験より）
枠穴はピースを置くたびに更新される。
ーーーーー
ーーーー懸念ーーー
ここで、同じ（座標の）最小点を持つ異なる2多角形が存在する場合がある。
（例えば、左上に2つの多角形の頂点がくっつく場合など。）
この場合は、枠穴の形が単純多角形にならない可能性があるので、注意したい。
枠穴はピースによって分割されることがあるかもしれないがそれは実装ずみである。
しかし、ピースが1頂点のみで接する置き方にはまだ未対応である。  --> 対応しました。(2017/10/01)